/**
 * CSE 431 Lab3
 * 
 * Evan Schwartzman
 * Si Thu Aung
 * 
 * This is the final version, not the one in Si Thu's repo. Thank You.
 *
 * name is essentially a node we made that can hold a string, as the title of the node. 
 * Since many nodes need a title, name can be used for many different nodes. So for example we may make an "if" name node and have it adopt if's children.
 * Some of these nodes will need to be further refined for type checking if used in lab4, but for this lab we used a combination of new nodes
 * and name 'temporaryNode' type ones to hold "titles"
 * 
 * Special nodes were made in some cases where extra information, besides this "title" were needed, 
 * for example Class Declaration nodes, which have properties of modifiers and types. We also created method, param, field,
 * and more new node types.
 *
 * Precedence rule fix is after non terminal declarations
 *
 * We used the reference parser as a guide, but made a few different design decisions. For example, we make mathematical 
 * symbols nodes that adopt their children, so for example, if one thing is > than another, > adopts the children.
 *
 * Fixed modifier so something like public public private becomes private, as demonstrated in the reference...
 *
 * Some added nodes and methods are in the action block. 
 */

package autogen;
import lab3.*;
import java_cup.runtime.*;

import java.util.Vector;
import java.util.Enumeration;

// $Id: jmm.cup 33 2010-08-09 21:47:19Z cytron $

/*
 * Java minus minus grammar
 *
 */

/*
 * This is a standard Java grammar, modified for our use.  Many features
 * are noted as "extra credit".  You must negotiate
 * the extra credit with the professor.
 *
 * Some features are added too: look for comments to that effect.
 * RC
 */

action code {:

   /**  Code that is included with the action blocks
     *
     */

   /* Need some classes that extend AbstractNode? Here's an example */
   /* The TemporaryNode is just a place holder, and is good for development but
    * should eventually go away.
    */

   class Example extends AbstractNode {
      public String getName() { return "Example"; }
   }

   class TemporaryNode extends AbstractNode {
   
     private String s;
   
     public TemporaryNode(String s) {
       this.s = s;
     }
   
     public String getName() { return s; }
   
   }
   
   class classDlcNode extends AbstractNode {
   
     private String mod,id;
   
     public classDlcNode(String m, String i) {
       this.mod = m;
       this.id = i;
     }
   
     public String getName() { return "Class "+mod+" "+ id; }
   
   }
   
   class name extends AbstractNode {
   
     private String n;
   
     public name(String m) {
       this.n = m;
     }
   
     public String getName() { return n; }
   
   }
   
   class fieldNode extends AbstractNode {
   
     private String mod,type,list;
   
     public fieldNode(String m, String t, String l) {
       this.mod = m;
       this.type = t;
       this.list = l;
     }
   
     public String getName() { return mod+" "+type+" "+list; }
   
   }
   
   class methodNode extends AbstractNode {
   
     private String mod,type,list;
   
     public methodNode(String m, String t, String l) {
       this.mod = m;
       this.type = t;
       this.list = l;
     }
   
     public String getName() { return mod+" "+type+" "+list; }
   
   }
   
   class paramNode extends AbstractNode {
   
     private String name;
     private name param;
   
     public paramNode(String m, name n) {
       this.name = m;
       this.param = n;
     }
   
     public String getName() { return name; }
     public name getParam() { return param; }
   
   }
   
   class spcl extends AbstractNode {
   
     private Integer name;
     private AbstractNode node;
   
     public spcl(Integer m, AbstractNode n) {
       this.name = m;
       this.node = n;
     }
   
     public Integer getName2() { return name; }
     public AbstractNode getN() { return node; }
   
   }
   
   class decOrClass extends AbstractNode {
   
     private name name_node;
     private classDlcNode cla;
   
     public decOrClass(name n, classDlcNode c) {
       this.name_node = n;
       this.cla = c;
     }
   
     public name getName3() { return name_node; }
     public classDlcNode getN2() { return cla; }
   
   }
   
   class modNode extends AbstractNode {
   
     private String mod;
     private Integer boo;
     private Integer sta;
   
     public modNode(String m, int b, int s) {
       this.mod = m;
       this.boo = b;
       this.sta = s;
     }
   
     public String getName4() { return mod; }
     public Integer getInt() { return boo; }
     public Integer getInt2() { return sta; }
   
   }
   
   class IntegerNode extends AbstractNode {
      private Integer val;
      public IntegerNode(Integer val) { this.val = val; }
      public String getName() { return "Integer " + val; }
   }

   /*  Factory methods to make nodes 
    *   Add ones here that make it easy for you.
        The ones given here are temporary placeholders
    */

   public AbstractNode makeNode(Symbol s) { return new TemporaryNode(symString.symToString[s.sym]); }
   public name makeNodeSymbol(Symbol s) { return new name(symString.symToString[s.sym]); }
   public name makeNodeString(String s) { return new name(s); }
   public AbstractNode makeNode(String s) { return new TemporaryNode(s);   }
   public AbstractNode makeNode(Integer i) { return new IntegerNode(i);   }
   public classDlcNode makeNode(String mod, String id) { return new classDlcNode(mod, id); }
   public fieldNode makeNode(String mod, String type, String list) { return new fieldNode(mod, type, list); }
   public methodNode makeNodeMethod(String mod, String type, String list) { return new methodNode(mod, type, list); }
   public paramNode makeNodeParam(String type, name n) { return new paramNode(type, n); }
   public spcl makeNodeSpcl(Integer name, AbstractNode node) { return new spcl(name, node); }
   public decOrClass makeNodeDual(name n, classDlcNode c) { return new decOrClass(n, c); }
   public modNode makeNodeMod(String n, Integer i, Integer w) { return new modNode(n, i, w); }
:};

/*
 * Almost all of these can just be Symbol types, used for parsing.  Occasionally,
 * a terminal has semantic information of use, as was the case for number in hw2.
 * In those cases, declare the Symbol appropriately but you'll have to modify the
 * Scanner to return the right type.  I've done this for integer and string types below
 */

terminal  Symbol   OP_GE, OP_LE, OP_EQ, OP_NE, OP_GT, OP_LT;
terminal  Symbol   OP_LAND, OP_LOR;
terminal  Symbol   INSTANCEOF;
terminal  Symbol   HAT, TILDE;
terminal  Symbol   BOOLEAN;
terminal  Symbol   CLASS;
terminal  Symbol   ELSE;
terminal  Symbol   IF, INT;
terminal  Symbol   NEW, NULL;
terminal  Symbol   PRIVATE, PUBLIC;
terminal  Symbol   RETURN;
terminal  Symbol   STATIC, SUPER;
terminal  Symbol   THIS;
terminal  Symbol   VOID;
terminal  Symbol   WHILE;
terminal  Symbol   ASS_ADD;
terminal  Symbol   LPAREN, RPAREN, LBRACE, RBRACE, EQUALS;
terminal  Symbol   PERIOD, COLON, SEMICOLON, COMMA, PIPE, AND, ASTERICK;
terminal  Symbol   PLUSOP, MINUSOP, RSLASH, PERCENT, QUESTION;
terminal  Symbol   BANG; 

terminal  String   IDENTIFIER, LITERAL;
terminal  Integer  INTNUMBER;


/* To save you typing, I've made all these AbstracNode types.  You will want
 * to customize them as you go.
 */

non terminal   AbstractNode     CompilationUnit;
non terminal   name     		FieldVariableDeclaration;
non terminal   name			    MethodDeclaration;
non terminal   paramNode		MethodDeclarator;
non terminal   name		     	ParameterList,  Parameter;
non terminal   AbstractNode     MethodBody, ConstructorDeclaration;
non terminal   AbstractNode     StaticInitializer;
non terminal   name			    Block;
non terminal   AbstractNode     LocalVariableDeclarationsAndStatements;
non terminal   AbstractNode     LocalVariableDeclarationOrStatement;
non terminal   decOrClass		LocalVariableDeclarationStatement ;
non terminal   AbstractNode     Statement, EmptyStatement;
non terminal   AbstractNode     ExpressionStatement, SelectionStatement;
non terminal   AbstractNode     IterationStatement;
non terminal   AbstractNode     PrimaryExpression;
non terminal   AbstractNode     NotJustName, ComplexPrimary, ComplexPrimaryNoParenthesis;
non terminal   name			    FieldAccess, MethodCall, MethodReference;
non terminal   AbstractNode     SpecialName, ArgumentList, AllocationExpression;
non terminal   AbstractNode     PostfixExpression;
non terminal   AbstractNode     UnaryExpression, LogicalUnaryExpression;
non terminal   name     		LogicalUnaryOperator, ArithmeticUnaryOperator;
non terminal   AbstractNode     CastExpression, MultiplicativeExpression;
non terminal   AbstractNode     AdditiveExpression, ShiftExpression, RelationalExpression;
non terminal   AbstractNode     EqualityExpression, AndExpression, ExclusiveOrExpression;
non terminal   AbstractNode     InclusiveOrExpression, ConditionalAndExpression;
non terminal   AbstractNode		ConditionalOrExpression;
non terminal   name     		ConditionalExpression, AssignmentExpression;
non terminal   name			    AssignmentOperator;
non terminal   name     		Expression;
non terminal   AbstractNode     ReturnStatement;

non terminal   String           Identifier;
non terminal   name     		Literal;
non terminal   AbstractNode     Number;
non terminal   name		    	DeclaratorName; 
non terminal   name     		FieldVariableDeclaratorName; 
non terminal   name		    	MethodDeclaratorName; 
non terminal   name     		LocalVariableDeclaratorName; 
non terminal   AbstractNode     TypeDeclarations;
non terminal   AbstractNode     TypeDeclaration;
non terminal   classDlcNode    	ClassDeclaration;
non terminal   AbstractNode     ClassBody;
non terminal   modNode          Modifiers;
non terminal   spcl     		FieldDeclarations;
non terminal   spcl     		FieldDeclaration;
non terminal   name 	     	FieldVariableDeclarators;
non terminal   AbstractNode     LocalVariableDeclarators;
non terminal   name     		QualifiedName; 
non terminal   name	        	TypeName, TypeSpecifier;
non terminal   name    			PrimitiveType;

//Precedence fix to solve SHift-Reduce conflict
precedence left LPAREN, RPAREN;
precedence left ELSE;

start with CompilationUnit;


CompilationUnit
        ::=	TypeDeclarations:td
		{:
			AbstractNode prog = makeNode("Program").adoptChildren(td);

			System.out.println("\nAST\n");
			prog.walkTree(new PrintTree(System.out));
		:}
        ;

/*
 * Simple node magic to link nodes together as siblings.  Covered
 * in class -- you have to be aware of how the list is growing
 * These children will be adopted by CompilationUnit rule above.
 */

TypeDeclarations
        ::= TypeDeclaration:td
		{: RESULT = td; :}
        |   TypeDeclarations:tds  TypeDeclaration:td
		{: RESULT = tds.makeSibling(td);  :}
        ;

/*
 * Extra credit:  interfaces, but classes are all we'll deal with by default
 */
TypeDeclaration
        ::= ClassDeclaration:rhs
		{: RESULT = rhs; :}
        ;


ClassDeclaration
        ::= Modifiers:mods CLASS:cl Identifier:id ClassBody:clb
        {:
        	classDlcNode classDlc= makeNode(mods.getName4(), id);
        	classDlc.adoptChildren(clb);
        	RESULT= classDlc;
        :}
		;

/*
 * Process bottom-up to figure out whether the Modifiee
 * is   static or not
 * is   public or not
 * A pair of booleans, like IntPair could be used, or IntPair could be used
 * if you know what I mean.
 */
 
// 1 means is public or is static depending on field
 
Modifiers		
	::= PUBLIC
	{:RESULT= makeNodeMod("public", 1, 0);:}
	|   PRIVATE
	{:RESULT= makeNodeMod("private", 0, 0);:}
	|   STATIC
	{:RESULT= makeNodeMod("private static", 0, 1);:}
	|   Modifiers:mds PUBLIC
	{:
		if (mds.getInt() == 0 && mds.getInt2() == 0){
			RESULT= makeNodeMod("public",0, 0);
		}else if (mds.getInt() == 0 && mds.getInt2() == 1 ){
			RESULT= makeNodeMod("public static", 1, 1);
		}else if (mds.getInt() == 1){
			RESULT= makeNodeMod(mds.getName4(), mds.getInt(), mds.getInt2());
		}
	:}
	|   Modifiers:mds PRIVATE
	{:
		if (mds.getInt() == 1 && mds.getInt2() == 0){
			RESULT= makeNodeMod("private",0, 0);
		}else if (mds.getInt() == 1 && mds.getInt2() == 1 ){
			RESULT= makeNodeMod("private static", 0, 1);
		}else if (mds.getInt() == 0){
			RESULT= makeNodeMod(mds.getName4(), mds.getInt(), mds.getInt2());
		}
	:}
	|   Modifiers:mds STATIC
	{:
		if (mds.getInt() == 0 && mds.getInt2() == 0){
			RESULT= makeNodeMod("private static",0, 1);
		}else if (mds.getInt() == 1 && mds.getInt2() == 0 ){
			RESULT= makeNodeMod("public static", 1, 1);
		}else if (mds.getInt2() == 1){
			RESULT= makeNodeMod(mds.getName4(), mds.getInt(), mds.getInt2());
		}
	:}
	;
	
/*
 * Extra credit:  other types
 */
PrimitiveType
        ::=	BOOLEAN:tok
        {:RESULT= makeNodeString("Z");:}
        | 	INT:tok
        {:RESULT= makeNodeString("I");:}
        | 	VOID:tok
        {:RESULT= makeNodeString("V");:}
        ;

/*
 * You need a nice structure to represent this list of identifiers.
 * You might consider java.util.Vector
 */
QualifiedName
        ::= Identifier:id
        {:RESULT= makeNodeString(id);:}
        |   QualifiedName:qn PERIOD Identifier:id
        {:RESULT= makeNodeString(qn+"."+id);:}
        ;

/*
 * In a given program, FieldDeclarations can occur in any order.
 * But we would like them grouped together.
 * So, structure your AST so that the items coming back from
 * FieldDeclarations are grouped by:
 *
 *   fields, statics, constructors, methods, inner classes
 *
 * (run the class solution if confused)
 */
ClassBody
	::= LBRACE FieldDeclarations:fds RBRACE
	{:
		AbstractNode classBody= makeNode("Class Body");
		
		name fields = makeNodeString("Fields");
		name methods = makeNodeString("Methods");
		name constructor = makeNodeString("Constructors");
		name sta = makeNodeString("Statics");
		name cl = makeNodeString("Inner Classes");
		
		classBody.adoptChildren(fields);
		classBody.adoptChildren(constructor);
		classBody.adoptChildren(methods);
		classBody.adoptChildren(sta);
		classBody.adoptChildren(cl);
		
		
		while(fds != null){
		
			if(fds.getName2() == 0){
				fields.adoptChildren(fds.getN());
			}else if(fds.getName2() == 1){
				methods.adoptChildren(fds.getN());
			}else if(fds.getName2() == 2){
				constructor.adoptChildren(fds.getN());
			}else if(fds.getName2() == 3){
				sta.adoptChildren(fds.getN());
			}else if(fds.getName2() == 4){
				cl.adoptChildren(fds.getN());
			}
    	
    		fds = (spcl) fds.getSib(); 
    	}
		
		RESULT= classBody;
    :}
	|   LBRACE RBRACE
	{:
		AbstractNode classBody= makeNode("Class Body");
		
		name fields = makeNodeString("Fields");
		name methods = makeNodeString("Methods");
		name constructor = makeNodeString("Constructors");
		name sta = makeNodeString("Statics");
		name cl = makeNodeString("Inner Classes");
		
		classBody.adoptChildren(fields);
		classBody.adoptChildren(constructor);
		classBody.adoptChildren(methods);
		classBody.adoptChildren(sta);
		classBody.adoptChildren(cl);
		
		RESULT= classBody;
	:}
	;

FieldDeclarations
	::= FieldDeclaration:fd
	{:
	    RESULT= fd; 
    :}
    | FieldDeclarations:fds FieldDeclaration:fd
    {:
    	fds.makeSibling(fd);
	    RESULT= (spcl) fds; 
    :}
    ;

// Use ints to tell it which parent should adopt this thing...

FieldDeclaration
	::= FieldVariableDeclaration:fvd SEMICOLON
	{:
		spcl field = makeNodeSpcl(0, fvd);	
		RESULT= field;
	:}
	|   MethodDeclaration:rhs
	{:
		spcl method = makeNodeSpcl(1, rhs);	
		RESULT= method;
	:}
	|   ConstructorDeclaration:rhs
	{:
		spcl constructors = makeNodeSpcl(2, rhs);	
		RESULT= constructors;
	:}
	|   StaticInitializer:rhs
	{:
		spcl sta = makeNodeSpcl(3, rhs);	
		RESULT= sta;
	:}
	|   ClassDeclaration:cl            /* Inner classes */
	{:
		spcl cla = makeNodeSpcl(4, cl);	
		RESULT= cla;
	:}
	;

/*
 * This isn't structured so nicely for a bottom up parse.  Recall
 * the example I did in class for Digits, where the "type" of the digits
 * (i.e., the base) is sitting off to the side.  You'll have to do something
 * here to get the information where you want it, so that the declarations can
 * be suitably annotated with their type and modifier information.
 */
FieldVariableDeclaration
	::= Modifiers:m TypeSpecifier:t FieldVariableDeclarators:fvds
	{:
		fieldNode f = makeNode(m.getName4(), t.getName(), fvds.getName());
	    t.adoptChildren(f);
	    
		while(fvds.getSib() != null){
		    fieldNode field = makeNode(m.getName4(), t.getName(), fvds.getSib().getName());
		    t.adoptChildren(field);
		    fvds = (name)fvds.getSib();
	    }
	    RESULT= t; 
    :}
	;

TypeSpecifier
        ::= TypeName:rhs
        {:RESULT= rhs;:}
        ;

TypeName
	::= PrimitiveType:rhs
	{:RESULT= rhs;:}
	|   QualifiedName:rhs
	{:RESULT= rhs;:}
	;

FieldVariableDeclarators
	::=  FieldVariableDeclaratorName:v
	{:RESULT= makeNodeString(v.getName());:}
	|    FieldVariableDeclarators:fds COMMA FieldVariableDeclaratorName:v
	{:
	fds.makeSibling(v);
	RESULT= (name) fds;
	:}
	;

/*
 * We require modifiers, extra credit for package stuff
 */
MethodDeclaration
	::= Modifiers:m TypeSpecifier:t MethodDeclarator:md     MethodBody:rhs
	{:
		methodNode mn = makeNodeMethod(m.getName4(), t.getName(), md.getName());
		t.adoptChildren(mn);
		name body = makeNodeString("PARAMS");
		
		if(md.getParam() != null){
			body.adoptChildren(md.getParam());
		}
		
		mn.adoptChildren(body);
		body.makeSibling(rhs);
		RESULT= t;
    :}
	;

MethodDeclarator
	::= MethodDeclaratorName:dn LPAREN ParameterList:pl RPAREN
	{:
		paramNode p = makeNodeParam(dn.getName(), pl);
		RESULT= p;
    :}
	|   MethodDeclaratorName:dn LPAREN RPAREN
	{:
		paramNode p = makeNodeParam(dn.getName(), null);
		RESULT= p;
    :}
	;

ParameterList
	::= Parameter:rhs
	{: RESULT= rhs; :}
	|   ParameterList:spine COMMA Parameter:rhs
	{:
		spine.makeSibling(rhs);
		RESULT= spine;
    :}
	;

Parameter
	::= TypeSpecifier:t DeclaratorName:dn
	{:RESULT= makeNodeString("Param" + " " + t.getName()+ " " + dn.getName()); :}
	;

DeclaratorName
	::= Identifier:in
	{:RESULT= makeNodeString(in);:}
    ;

MethodDeclaratorName
	::= Identifier:in
	{:RESULT= makeNodeString(in);:}
    ;

FieldVariableDeclaratorName
	::= Identifier:in
	{:RESULT= makeNodeString(in);:}
    ;

LocalVariableDeclaratorName
	::= Identifier:in
	{:RESULT= makeNodeString(in);:}
    ;

MethodBody
	::= Block:rhs
	{:RESULT= rhs;:}
	;

ConstructorDeclaration
	::= Modifiers:m MethodDeclarator:md        Block:rhs
	{:
		name t = makeNodeString("");
		name n = makeNodeString(m.getName4()+" "+md.getName());
		name body = makeNodeString("PARAMS");
		
		if(md.getParam() != null){
				body.adoptChildren(md.getParam());
			}
			
		n.adoptChildren(body);
		body.makeSibling(rhs);
		t.adoptChildren(n);
		RESULT= t;
	:}
	;

StaticInitializer
	::= STATIC Block:rhs
	{: RESULT= rhs; :}
	;

/*
 * These can't be reorganized, because the order matters.
 * For example:  int i;  i = 5;  int j = i;
 */
Block
	::= LBRACE LocalVariableDeclarationsAndStatements:stmts RBRACE
	{:
		name t = makeNodeString("BLOCK");
		t.adoptChildren(stmts);
		RESULT= t;
	:}
	|   LBRACE RBRACE
		{:
			name t = makeNodeString("BLOCK");
			RESULT= t;
		:}
        ;

LocalVariableDeclarationsAndStatements
	::= LocalVariableDeclarationOrStatement:rhs
	{:RESULT=rhs;:}
	|   LocalVariableDeclarationsAndStatements:lvds 
	    LocalVariableDeclarationOrStatement:rhs
	    {:
		    if(rhs != null){
		    lvds.makeSibling(rhs);
		    }
		    RESULT=lvds;
	    :}
	;

LocalVariableDeclarationOrStatement
	::= LocalVariableDeclarationStatement:rhs
	{:
		if(rhs.getName3() == null){
			RESULT = rhs.getN2();
		}else if(rhs.getN2() == null){
			RESULT = rhs.getName3();
		}
	:}
	|   Statement:rhs
	{:RESULT=rhs;:}
	;

LocalVariableDeclarationStatement
	::= TypeSpecifier:t LocalVariableDeclarators:rhs SEMICOLON
	{:
		t.adoptChildren(makeNodeString("Local" + " " + t + " " + rhs));
		
		while(rhs.getSib() != null){
			t.adoptChildren(makeNodeString("Local" + " " + t + " " + rhs.getSib()));
			rhs = rhs.getSib();
		}
		
		RESULT=makeNodeDual(t, null);
	:}
	
	|   ClassDeclaration:cl                  /* Inner classes */ 			
	{: RESULT = makeNodeDual(null, cl); :}	
	;

LocalVariableDeclarators
	::= LocalVariableDeclaratorName:v
	{:RESULT=v;:}
	|   LocalVariableDeclarators:fds COMMA LocalVariableDeclaratorName:v
	{:
		fds.makeSibling(v);
		RESULT=fds;
	:}
	;

Statement
	::= EmptyStatement:es
	{:RESULT=es;:}
	|   ExpressionStatement:rhs SEMICOLON
	{:RESULT=rhs;:}
        |   SelectionStatement:ss
        {:RESULT=ss;:}
        |   IterationStatement:is
        {:RESULT=is;:}
	|   ReturnStatement:rs
	{:RESULT=rs;:}
	|   Block:rhs
	{:RESULT=rhs;:}
	;

EmptyStatement
	::= SEMICOLON
	{:RESULT=(AbstractNode) makeNodeString("empty");:}
        ;

ExpressionStatement
	::= Expression:rhs
	{:RESULT=rhs;:}
	;

/*
 *  You will eventually have to address the shift/reduce error that
 *     occurs when the second IF-rule is uncommented.
 *
 */

SelectionStatement
	::= IF LPAREN Expression:exp RPAREN Statement:stmt1 ELSE Statement:stmt2
	{:
		name a= makeNodeString("If");
		a.adoptChildren(exp);
		a.adoptChildren(stmt1);
		a.adoptChildren(stmt2);
		RESULT= a;
	:}
	|   IF LPAREN Expression:exp RPAREN Statement:stmt
	{:
		name a= makeNodeString("If");
		a.adoptChildren(exp);
		a.adoptChildren(stmt);
		RESULT= a;
	:}
	;

/* 
 * Extra Credit:  FOR statement, DO statement
 */
IterationStatement
	::= WHILE LPAREN Expression:exp RPAREN Statement:stmt
	{:
		name a= makeNodeString("WHILE");
		a.adoptChildren(exp);
		a.adoptChildren(stmt);
		RESULT= a;
	:}
	;

ReturnStatement
	::= RETURN Expression:e SEMICOLON
	{:
		name a= makeNodeString("op Return");
		a.adoptChildren(e);
		RESULT=a;
	:}
	|   RETURN            SEMICOLON
	{:
		name a= makeNodeString("Return");
		RESULT=a;
	:}
	;

PrimaryExpression
	::= QualifiedName:t
	{:RESULT= makeNodeString("Local Ref " + t);:}
	|   NotJustName:rhs
	{:RESULT= rhs;:}
/*
 *  You will eventually have to explain the conflicts that arise when the rule below
 *       is uncommented.
 *  This rule lets a block ( { .... }  ) serve anywhere a primary expression could.
 *  So you could write  a = { while (h>5) h = h -k; };
 *
 *	|   Block:rhs
 */
	;

NotJustName
	::= SpecialName:spn
	{:RESULT=spn;:}
	|   AllocationExpression: a
	{:RESULT= a;:}
	|   ComplexPrimary:rhs
	{:RESULT= rhs;:}
	;

ComplexPrimary
	::= LPAREN Expression:rhs RPAREN
	{:RESULT= rhs;:}
	|   ComplexPrimaryNoParenthesis:rhs
	{:RESULT= rhs;:}
	;

ComplexPrimaryNoParenthesis
	::= Literal:rhs
	{:RESULT= rhs;:}
	|   Number:rhs
	{:RESULT= rhs;:}
	|   FieldAccess:f
	{:RESULT= f;:}
	|   MethodCall:m
	{:RESULT= m;:}
	;

FieldAccess
	::= NotJustName:n PERIOD Identifier:i
	{: RESULT = makeNodeString(n.getName()+"."+i); :}
	;


MethodCall 
	::= MethodReference:m LPAREN ArgumentList:a RPAREN
	{:
		name mr = makeNodeString("Method Call");
		m.adoptChildren(makeNodeString("PARAMS").adoptChildren(a));
		RESULT= (name) mr.adoptChildren(m);
	:}
	|   MethodReference:m LPAREN RPAREN
	{:
		name mr = makeNodeString("Method Call");
		m.adoptChildren(makeNodeString("PARAMS"));
		RESULT= (name) mr.adoptChildren(m);
	:}
	;

MethodReference
	::= ComplexPrimaryNoParenthesis:cp
	{:RESULT= (name) cp;:}
	|   QualifiedName:q
	{:RESULT= (name) q;:}
	|   SpecialName:sn
	{:RESULT= (name) sn;:}
	;

SpecialName
	::= THIS
	{:RESULT= makeNodeString("THIS");:}
	|   NULL
	{:RESULT= makeNodeString("NULL");:}
	|   SUPER
	{:RESULT= makeNodeString("SUPER");:}
	;

ArgumentList
	::= Expression:e
	{:RESULT= makeNodeString("param " +e);:}	
	|   ArgumentList:a COMMA Expression:e
	{:
		a.makeSibling(makeNodeString("param " +e));
		RESULT= a;
	:}
	;

/*
 * Extra credit:  anonymous subclasses
 */
AllocationExpression
	::= NEW TypeName:t LPAREN ArgumentList:al RPAREN
	{: RESULT = t.adoptChildren(al); :}
	|   NEW TypeName:t LPAREN              RPAREN
	{:RESULT= t;:}
	;

/*
 * Extra credit, add post increment and decrement
 */
PostfixExpression
	::= PrimaryExpression:rhs
	{:RESULT= rhs;:}
        ;

Expression
	::= AssignmentExpression:rhs
	{:RESULT=rhs;:}
        ;

/*
 * Here we go.  Following are a bunch of rules to handle the right priority and
 * associativity of operators.  These rules can be treated fairly uniformly 
 * for now
 * However, be aware that down the road, you will want subclassees that 
 * can distinguish
 * the nodes by type, so that you can generate different code for 
 * plus vs. minus, for example.
 */

/*
 * What kind of associativity do we get for assignment expressions - why?
 */

AssignmentExpression
	::= ConditionalExpression:rhs
	{:RESULT= rhs;:}
	|   UnaryExpression:lhs AssignmentOperator:op AssignmentExpression:rhs
	{:
		name a = makeNodeString("Assign");
		if(lhs != null){
			if(rhs.getSib() != null){
				lhs.adoptChildren(rhs);
			}else{
				lhs.makeSibling(rhs);
			}
		}
		a.adoptChildren(lhs);
		RESULT=a;
	:}
	;

AssignmentOperator
	::= EQUALS:tok
	{:RESULT=makeNodeSymbol(tok);:}
	|   ASS_ADD:tok   /* There are more of these if you're interested */
	{:RESULT=makeNodeSymbol(tok);:}
	;

ConditionalExpression
	::= ConditionalOrExpression:ce
		{:RESULT= (name)ce;:}
	|   ConditionalOrExpression:ce QUESTION Expression:e COLON ConditionalExpression:c
		{:
			name i = makeNodeString("If");
			ce.makeSibling(e);
			i.adoptChildren(ce);
			i.adoptChildren(c);
			RESULT= (name) i;
		:}
	
	;

ConditionalOrExpression
	::= ConditionalAndExpression:cne
	{:RESULT=cne;:}
	|   ConditionalOrExpression:left OP_LOR:op ConditionalAndExpression:right   /* short-circuit OR */
	{:
		name o = makeNodeString("||");
		RESULT= o.adoptChildren(left.makeSibling(right));
	:}
	;

ConditionalAndExpression
	::= InclusiveOrExpression:rhs
	{:RESULT= rhs;:}
	|   ConditionalAndExpression:left OP_LAND:op InclusiveOrExpression:right   /* short-circuit AND */
	{:
		name o = makeNodeString("&&");
		RESULT= o.adoptChildren(left.makeSibling(right));
	:}
	;

InclusiveOrExpression
	::= ExclusiveOrExpression:rhs
	{:RESULT= rhs;:}
	|   InclusiveOrExpression:left PIPE:op ExclusiveOrExpression:right
	{:
		name o = makeNodeString("|");
		RESULT= o.adoptChildren(left.makeSibling(right));
	:}
	;

ExclusiveOrExpression
	::= AndExpression:rhs
	{:RESULT= rhs;:}
	|   ExclusiveOrExpression:left HAT:op AndExpression:right
	{:
		name o = makeNodeString("^");
		RESULT= o.adoptChildren(left.makeSibling(right));
	:}
	;

AndExpression
	::= EqualityExpression:rhs
	{:RESULT= rhs;:}
        |   AndExpression:left AND:op EqualityExpression:right
    {:
		name o = makeNodeString("&");
		RESULT= o.adoptChildren(left.makeSibling(right));
	:}
        ;

EqualityExpression
	::= RelationalExpression:rhs
	{:RESULT= rhs;:}
        |   EqualityExpression:left OP_EQ:op RelationalExpression:right
    {:
		name o = makeNodeString("==");
		RESULT= o.adoptChildren(left.makeSibling(right));
	:}

        |   EqualityExpression:left OP_NE:op RelationalExpression:right
	{:
		name o = makeNodeString("!=");
		RESULT= o.adoptChildren(left.makeSibling(right));
	:}
        ;
 
RelationalExpression
	::= ShiftExpression:rhs
	{:RESULT= rhs;:}
    |   RelationalExpression:left OP_GT:op    ShiftExpression:right
    {:
		name o = makeNodeString(">");
		RESULT= o.adoptChildren(left.makeSibling(right));
	:}
	|   RelationalExpression:left OP_LT:op    ShiftExpression:right
	{:
		name o = makeNodeString("<");
		RESULT= o.adoptChildren(left.makeSibling(right));
	:}
	|   RelationalExpression:left OP_LE:op      ShiftExpression:right
	{:
		name o = makeNodeString("<=");
		RESULT= o.adoptChildren(left.makeSibling(right));
	:}
	|   RelationalExpression:left OP_GE:op      ShiftExpression:right
	{:
		name o = makeNodeString(">=");
		RESULT= o.adoptChildren(left.makeSibling(right));
	:}
	|   RelationalExpression:left INSTANCEOF:op TypeSpecifier:right
	{:
		name o = makeNodeString("instanceof");
		RESULT= o.adoptChildren(left.makeSibling(right));
	:}
	;

/*
 * Extra credit:  shift expressions
 */
ShiftExpression
	::= AdditiveExpression:rhs
	{:RESULT= rhs;:}
	;

AdditiveExpression
	::= MultiplicativeExpression:rhs
	{:RESULT= rhs;:}
        |   AdditiveExpression:lhs PLUSOP:op MultiplicativeExpression:rhs
        {:
        	name p = makeNodeString("+");
        	lhs.makeSibling(rhs);
        	RESULT= p.adoptChildren(lhs);
        :}
	|   AdditiveExpression:lhs MINUSOP:op MultiplicativeExpression:rhs
	{:
		name s = makeNodeString("-");
		lhs.makeSibling(rhs);
		RESULT= s.adoptChildren(lhs);
	:}
        ;

MultiplicativeExpression
	::= CastExpression:rhs
	{:RESULT= rhs;:}
	|   MultiplicativeExpression:lhs ASTERICK:op CastExpression:rhs
	{:
    	name p = makeNodeString("*");
    	lhs.makeSibling(rhs);
    	RESULT= p.adoptChildren(lhs);
    :}
	|   MultiplicativeExpression:lhs RSLASH:op CastExpression:rhs
	{:
    	name p = makeNodeString("/");
    	lhs.makeSibling(rhs);
    	RESULT= p.adoptChildren(lhs);
    :}
	|   MultiplicativeExpression:lhs PERCENT:op CastExpression:rhs	/* remainder */
	{:
    	name p = makeNodeString("%");
    	lhs.makeSibling(rhs);
    	RESULT= p.adoptChildren(lhs);
    :}
	;

/*
 * Be sure to introduce an explicit cast operator
 */
CastExpression
	::= UnaryExpression:rhs						/* no cast */
	{:RESULT= rhs;:}
        |   LPAREN PrimitiveType:s RPAREN CastExpression:lue		/* More casts coming */
    {:
    	name p = makeNodeString("Cast");
    	s.adoptChildren(lue);
    	RESULT= (name) p.adoptChildren(s);
    :}
	|   LPAREN Expression:exp RPAREN LogicalUnaryExpression:lue	/* Final cast */

	{:
    	name p = makeNodeString("Final Cast");
    	lue.adoptChildren(exp);
    	RESULT= (name) p.adoptChildren(lue);
    :}
	;

/*
 * Extra credit:  pre-increment and pre-decrement
 */
UnaryExpression
	::= LogicalUnaryExpression:rhs
	{:RESULT= rhs;:}
	|   ArithmeticUnaryOperator:op CastExpression:exp
	{:RESULT= op.adoptChildren(exp);:}
	;

ArithmeticUnaryOperator		
	::= PLUSOP:rhs
	{:RESULT= makeNodeString("Unary Plus");:}
	|   MINUSOP:rhs
	{:RESULT= makeNodeString("Negate");:}
	;

LogicalUnaryExpression
	::= PostfixExpression:rhs
	{:RESULT= rhs;:}
	|   LogicalUnaryOperator:op UnaryExpression:uexp
	{:RESULT= op.adoptChildren(uexp);:}
	;

LogicalUnaryOperator
	::= BANG:rhs
	{:RESULT = makeNodeString("!");:}
	|  TILDE:rhs
	{:RESULT = makeNodeString("~");:}
	;

Identifier
	::= IDENTIFIER:id
	{:RESULT = id;:}
	;

Literal
	::= LITERAL:lit
	{: RESULT = makeNodeString("Literal "+ lit); :}
	;

Number
	::= INTNUMBER:n
	{: RESULT = makeNodeString("Int "+ n.toString()); :}
	;